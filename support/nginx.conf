events {
}

http {
    upstream upstream_norsk {
        server host.docker.internal:8080;
        keepalive 64;
    }

    upstream upstream_vis {
        server host.docker.internal:6791;
        keepalive 64;
    }

    upstream upstream_studio {
        server host.docker.internal:8000;
        keepalive 64;
    }

    include /etc/nginx/mime.types;

    # http settings for auth (upstream servers)
    include /mnt/nginx-auth/http.conf;

    http2 on;

    server {
        listen [::]:443 ssl ipv6only=on;
        listen 443 ssl default_server;

        # Certificates
        ssl_certificate /run/secrets/nginx.ec.crt;
        ssl_certificate_key /run/secrets/nginx.ec.key;

        # Proxy settings
        proxy_http_version 1.1;
        proxy_read_timeout 3600;

        # server settings for auth (/oauth2/ location)
        include /mnt/nginx-auth/server.conf;

        ##
        # Individual components
        ##

        # Studio
        # Proxy static files (especially the logos) without auth
        location ~ ^/studio/(static/.*)$ {
            proxy_pass http://upstream_studio/$1;
        }
        location ~ ^/studio/(.*)$ {
            # location settings for auth: auth_request or auth_basic
            include /mnt/nginx-auth/location.conf;

            proxy_pass http://upstream_studio/$1;
            proxy_set_header Host $host;
            # Used to template `head/base` in `view.html` for components
            proxy_set_header X-Rewrite-URL $request_uri;
            # Settings for websockets
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            # Push redirects under /studio too (e.g. /docs -> /studio/docs/)
            proxy_redirect / /studio/;
        }
        location ~ ^(/?|/studio)$ {
            return 301 /studio/;
        }
        # `instanceApiUrl()`/`staticApiUrl()` are (currently) hardcoded to the web root
        location ~ ^/(live|components)(/.*)?$ {
            # 308 to keep POST and other methods intact
            return 308 /studio$request_uri;
        }

        # Norsk
        # (No websockets under the public web endpoints)
        location ~ ^/norsk/(.*)$ {
            proxy_pass http://upstream_norsk/$1;
            proxy_set_header Host $host;
        }
        location ~ ^/norsk$ {
            return 301 /norsk/;
        }

        # Visualiser
        # /visualiser/ -> :6791/visualiser/
        # /status -> :6791/status
        # /uvis/ -> :6791/uvis/
        location ~ ^/(visualiser|uvis|status)(/.*)?$ {
            # Also secure these endpoints
            include /mnt/nginx-auth/location.conf;

            proxy_pass http://upstream_vis$request_uri;
            proxy_set_header Host $host;
            # Settings for websockets
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            # Do not rewrite redirects
        }

        # Hosted Norsk docs
        location ~ ^/docs(/.*)?$ {
            proxy_pass http://upstream_vis$request_uri;
            proxy_set_header Host $host;
            # Do not rewrite redirects
        }

        include /mnt/nginx-extras/server.conf;
    }

    # Redirect http:// -> https://
    server {
        return 302 https://$host$request_uri;
        listen 80 default_server;
        listen [::]:80;
    }

    include /mnt/nginx-extras/http.conf;

    # From https://nginx.org/en/docs/http/websocket.html
    # This sets `Connection: upgrade` when the `Upgrade` header is set
    # (particularly `Upgrade: websocket`).
    # `Connection` and `Upgrade` are both hop-by-hop headers, so they do not
    # get passed through by default.
    # Some upstreams (cowboy) will ignore them if they are set on regular
    # requests, but express.js validates that `Upgrade: websocket` is not set
    # for non-websocket endpoints.
    # Doing it this way ensures we are compliant, without having to hardcode
    # rules for websockets specially.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      ''; # `Connection: close` works against the keepalive directives
        # see https://www.f5.com/company/blog/nginx/avoiding-top-10-nginx-configuration-mistakes#no-keepalives
    }
}
